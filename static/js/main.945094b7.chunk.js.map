{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","filter","initialState","status","todos","value","isLoading","rootReducer","combineReducers","currentTodo","store","createStore","composeWithDevTools","applyMiddleware","thunk","TodoList","props","setTodo","dispatch","useDispatch","useSelector","length","className","map","id","completed","title","onClick","TodoFilter","setQuery","setFilter","filterOption","onSubmit","event","preventDefault","onChange","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","removeTodo","useEffect","userId","href","email","name","App","setTodosAction","todosAreLoadingAction","areTodosAreLoading","allTodos","askedTodos","toLowerCase","includes","catch","error","Error","finally","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.945094b7.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    // Implement all actions here\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","type SetQuery = {\n  type: 'filter/SET_QUERY';\n  payload: string;\n};\n\ntype SetFilter = {\n  type: 'filter/SET_FILTER';\n  payload: string;\n};\n\ntype Action = SetQuery | SetFilter;\n\ntype State = {\n  query: string;\n  status: string;\n};\n\nconst setQuery = (query: string): SetQuery => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst setFilter = (filter: string): SetFilter => ({\n  type: 'filter/SET_FILTER',\n  payload: filter,\n});\n\nexport const actions = { setQuery, setFilter };\n\nconst initialState: State = {\n  query: '',\n  status: 'All',\n};\n\nexport const filterReducer = (\n  state: State = initialState,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n    case 'filter/SET_FILTER':\n      return {\n        ...state,\n        status: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import { Todo } from '../types/Todo';\n\ntype SetTodos = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\ntype TodosAreLoading = {\n  type: 'todos/TODOS_ARE_LOADING';\n  payload: boolean;\n};\n\ntype Action = SetTodos | TodosAreLoading;\n\ntype State = {\n  todos: Todo[];\n  isLoading: boolean;\n};\n\nconst setTodosAction = (todos: Todo[]): SetTodos => {\n  return {\n    type: 'todos/SET',\n    payload: todos,\n  };\n};\n\nconst todosAreLoadingAction = (value: boolean): TodosAreLoading => {\n  return {\n    type: 'todos/TODOS_ARE_LOADING',\n    payload: value,\n  };\n};\n\nexport const actions = { setTodosAction, todosAreLoadingAction };\n\nconst initialState: State = {\n  todos: [],\n  isLoading: false,\n};\n\nexport const todosReducer = (\n  state: State = initialState,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'todos/SET':\n      return {\n        ...state,\n        todos: action.payload,\n      };\n    case 'todos/TODOS_ARE_LOADING':\n      return {\n        ...state,\n        isLoading: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport { filterReducer } from '../features/filter';\nimport { todosReducer } from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Todo } from '../../types/Todo';\nimport { actions } from '../../features/currentTodo';\nimport { RootState } from '../../app/store';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const { todos } = props;\n  const { setTodo } = actions;\n  const dispatch = useDispatch();\n\n  const selectCurrentTodo = (state: RootState) => state.currentTodo;\n\n  const currentTodo = useSelector(selectCurrentTodo);\n\n  return (\n    <>\n      { todos.length < 1 && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {todos.map(todo => (\n            <tr\n              data-cy=\"todo\"\n              className=\"\"\n              key={todo.id}\n            >\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={todo.completed\n                    ? 'has-text-success'\n                    : 'has-text-danger'}\n                >\n                  {todo.title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => {\n                    dispatch(setTodo(todo));\n                  }}\n                >\n                  <span className=\"icon\">\n                    <i className={currentTodo?.id !== todo.id\n                      ? 'far fa-eye'\n                      : 'far fa-eye-slash'}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actions } from '../../features/filter';\nimport { RootState } from '../../app/store';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useDispatch();\n  const { setQuery, setFilter } = actions;\n\n  const selectFilterOption = (state: RootState) => state.filter.status;\n  const selectQuery = (state: RootState) => state.filter.query;\n\n  const filterOption = useSelector(selectFilterOption);\n  const query = useSelector(selectQuery);\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) => (dispatch(setFilter(event.target.value)))}\n            value={filterOption}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => (dispatch(setQuery(event.target.value)))}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => {\n                dispatch(setQuery(''));\n                dispatch(setFilter('All'));\n              }}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { RootState } from '../../app/store';\nimport { getUser } from '../../api';\nimport { actions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const { removeTodo } = actions;\n  const dispatch = useDispatch();\n\n  const selectCurrentTodo = (state: RootState) => state.currentTodo;\n\n  const currentTodo = useSelector(selectCurrentTodo);\n\n  useEffect(() => {\n    if (currentTodo) {\n      getUser(currentTodo.userId)\n        .then(setUser);\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {currentTodo?.id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                dispatch(removeTodo());\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              { currentTodo?.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={user.email}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { actions } from './features/todos';\nimport { RootState } from './app/store';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\n\nexport const App: React.FC = () => {\n  const { setTodosAction, todosAreLoadingAction } = actions;\n  const dispatch = useDispatch();\n\n  const selectAreTodosAreLoading = (state: RootState) => state.todos.isLoading;\n  const selectCurrentTodo = (state: RootState) => state.currentTodo;\n  const selectFilterOption = (state: RootState) => state.filter.status;\n  const selectQuery = (state: RootState) => state.filter.query;\n\n  const areTodosAreLoading: boolean = useSelector(selectAreTodosAreLoading);\n  const currentTodo = useSelector(selectCurrentTodo);\n  const filterOption = useSelector(selectFilterOption);\n  const query = useSelector(selectQuery);\n\n  const selectTodosByCreterea = (state: RootState): Todo[] => {\n    const { todos } = state.todos;\n\n    const askedTodos = todos.filter(todo => {\n      return todo.title.toLowerCase().includes(query.toLowerCase());\n    });\n\n    switch (filterOption) {\n      case 'all':\n        return askedTodos;\n      case 'active':\n        return askedTodos.filter(todo => !todo.completed);\n      case 'completed':\n        return askedTodos.filter(todo => todo.completed);\n      default:\n        return askedTodos;\n    }\n  };\n\n  const allTodos: Todo[] = useSelector(selectTodosByCreterea);\n\n  useEffect(() => {\n    todosAreLoadingAction(true);\n\n    getTodos()\n      .then(todos => dispatch(setTodosAction(todos)))\n      .catch((error) => {\n        throw new Error(error);\n      })\n      .finally(() => todosAreLoadingAction(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              { areTodosAreLoading\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={allTodos}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}